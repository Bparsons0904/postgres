kind: pipeline
type: docker
name: default

steps:
  - name: build_postgres_image
    image: docker:20.10.7
    environment:
      SSH_AUTH_SOCK: /tmp/ssh-agent.sock
    commands:
      - apk add --no-cache openssh-client
      - eval $(ssh-agent -a /tmp/ssh-agent.sock)
      - echo "$SSH_KEY" | ssh-add -
      - mkdir -p ~/.ssh
      - ssh-keyscan -H github.com >> ~/.ssh/known_hosts
      - DOCKER_BUILDKIT=1 docker build --ssh default -t custom-postgres .

  - name: deploy_staging
    image: docker/compose:1.29.2
    environment:
      STAGING_DB_USER:
        from_secret: staging_db_user
      STAGING_DB_PASSWORD:
        from_secret: staging_db_password
      STAGING_DB_NAME:
        from_secret: staging_db_name
    commands:
      - docker-compose stop postgres_staging
      - docker-compose rm -f postgres_staging
      - docker-compose up -d postgres_staging
      - docker image prune -f
    when:
      branch:
        - main

  - name: deploy_production
    image: docker/compose:1.29.2
    environment:
      PROD_DB_USER:
        from_secret: prod_db_user
      PROD_DB_PASSWORD:
        from_secret: prod_db_password
      PROD_DB_NAME:
        from_secret: prod_db_name
    commands:
      - docker-compose stop postgres_production
      - docker-compose rm -f postgres_production
      - docker-compose up -d postgres_production
      - docker image prune -f
    when:
      event:
        - tag
      ref:
        - refs/tags/v*
